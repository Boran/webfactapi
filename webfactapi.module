<?php
/**
 * @file
 * Code for the Webfactory API feature.
 */

include_once 'webfactapi.features.inc';

/** Implements hook_menu */
function webfactapi_menu() {

  $items = array();

  $items['webfactapi/test/%/%'] = array(
    'page callback' => 'webfactapi_test',
    'page arguments' => array(2, 3),
    'access arguments' => array('access websites'),
    'type' => MENU_CALLBACK, // no menu
  );

  $items['admin/config/development/webfactapi'] = array(
    'title' => 'Webfact API settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webfactapi_settings_form'),
    'access arguments' => array('administer webfactapi settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function webfactapi_permission() {
  return array(
    'administer webfactapi settings' =>  array(
      'title' => t('Administer Webfact API settings'),
      'restrict access' => TRUE,
    ),
  );
}


/** Access callback */
function _webfact_api_website_resource_access($op = 'view', $args = array()) {
  if (isset($args['parameters'])) {
    $params = $args['parameters'];
    webfactapi_decode_incoming_params($params);
  }
  else {
    $params = array();
  }

  if ($op == 'create') {
    //check all required data is present
    $created_required_data = array(
      'hostname',
      'site_email',
      'node_title',
      'public',
      'owner_uid'
    );
    foreach ($created_required_data as $required_data) {
      if (!array_key_exists($required_data, $params) || !$params[$required_data]) {
        return services_error(t($required_data . ' is required'), 406);
      }
    }
  }
  elseif ($op == 'update') {

  }
  return TRUE;
}

/**
 * Implements hook_services_resources
 * @return array
 */
function webfactapi_services_resources() {
  $webfact_website_resource = array(
    'website' => array(
      'operations' => array(
        'retrieve' => array(
          'file' => array(
            'type' => 'inc',
            'module' => 'webfactapi',
            'name' => 'resources/website_resource'
          ),
          'callback' => '_webfact_api_website_retrieve',
          'args' => array(
            'nid' => array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the website to get',
            ),
            'parameters' => array(
              'name' => 'parameters',
              'optional' => TRUE,
              'type' => 'array',
              'description' => 'Parameters array',
              'default value' => array(),
              'source' => array('param' => 'parameters'),
            ),
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'index' => array(
          'file' => array(
            'type' => 'inc',
            'module' => 'webfactapi',
            'name' => 'resources/website_resource'
          ),
          'callback' => '_webfact_api_website_retrieve_all',
          'args' => array(
            'parameters' => array(
              'name' => 'parameters',
              'optional' => TRUE,
              'type' => 'array',
              'description' => 'Parameters array',
              'default value' => array(),
              'source' => array('param' => 'parameters'),
            ),
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'file' => array(
            'type' => 'inc',
            'module' => 'webfactapi',
            'name' => 'resources/website_resource'
          ),
          'callback' => '_webfact_api_website_update',
          'args' => array(
            'nid' => array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the node to get',
            ),
            'parameters' => array(
              'name' => 'website data',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The website data to update',
              'type' => 'array',
            ),
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
        ),
        'create' => array(
          'file' => array(
            'type' => 'inc',
            'module' => 'webfactapi',
            'name' => 'resources/website_resource'
          ),
          'callback' => '_webfact_api_website_create',
          'args' => array(
            'parameters' => array(
              'name' => 'website data',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The website data to create',
              'type' => 'array',
            ),
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('create'),
          'access arguments append' => TRUE,
        ),
      ),
    ),

  );

  return $webfact_website_resource;
}

/**
 * Test page call back
 */
function webfactapi_test($test, $param) {

  global $base_url;


  switch ($test) {

    case "websites" :

      $options = array(
        'method' => 'GET',
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json'),
      );

      $result = drupal_http_request("$base_url/webfact_api/website", $options);
//      dpm($result);

      break;

    case "websites-public" :

      $options = array(
        'method' => 'GET',
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json'),
      );

      $result = drupal_http_request("$base_url/webfact_api/website?parameters[field_public]=1", $options);

      break;

    case "websites-private" :

      $options = array(
        'method' => 'GET',
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json'),
      );

      $result = drupal_http_request("$base_url/webfact_api/website?parameters[field_public]=0", $options);

      break;

    case "website-create" :

      $data = array(
        'node_title' => 'AFDSFDS',
        'hostname' => 'fdsafdsae',
        'site_email' => 'gggggg@test.com',
        'public' => 1,
        'owner_uid' => 6,
      );
      $create_data = json_encode($data);

      $options = array(
        'method' => 'POST',
        'data' => $create_data,
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json'),
      );

      $result = drupal_http_request("$base_url/webfact_api/website", $options);

      $result_data = json_decode($result->data);

      $new_website_nid = $result_data->website_nid;

      $w = new WebfactController('admin');
      if ($w) {
        $w->arguments('create', $new_website_nid, 0);
      }

      break;

    case "website-update" :

      $data = array('hostname' => 'newguy');

      $update_data = json_encode($data);

      $options = array(
        'method' => 'PUT',
        'data' => $update_data,
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json'),
      );

      $result = drupal_http_request("$base_url/webfact_api/website/" . $param, $options);


      break;
  }

//  krumo($result);
//
//  krumo(json_decode($result->data));

  return '';

}


/**
 * Implements hook_services_authentication().
 */
function webfactapi_services_authentication_info() {
  return array(
    'title'                     => t('Webfact API authentication'),
    'description'               => t('Custom protocol to allow secure API authorization'),
    'authenticate_call'         => '_webfactapi_authenticate_call',
  );
}


/**
 * Authenticates a call.
 *
 * @param array $module
 * @param array $controller
 * @param array $args
 *  The arguments that are being used to call the method
 * @return string
 *  Returns empty string if authenticated, or a error message if authentication fails.
 */
function _webfactapi_authenticate_call($module, $controller, $args) {
  $error_message = '';

  $params = $args['parameters'];

  if (!isset($params['data'])) {
    $error_message = 'No request data.';

    return $error_message;
  }

  // Decrypt params using private key.
  $private_key = webfactapi_get_private_key();
  $decoded = urldecode($params['data']);

  $json_encoded_data = '';
  if (!openssl_private_decrypt($decoded, $json_encoded_data, $private_key))
  {
    $error_message = 'Failed to decrypt data.';

    return $error_message;
  }

  $data = json_decode($json_encoded_data, true);

  // Check that token is in place.
  if (!isset($data['token'])) {
    $error_message = 'No token.';

    return $error_message;
  }

  // Encrypt token and verify that it matches the api key.
  $api_key = webfactapi_get_api_key();
  if ($api_key != webfactapi_api_key_encrypt($data['token'])) {
    $error_message = 'Invalid token.';

    return $error_message;
  }

  // Proceed with the request.

  return $error_message;
}


/**
 * Webfact API form callback.
 */
function webfactapi_settings_form($form, &$form_state) {
  drupal_add_library('system', 'drupal.ajax');

  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => 'API key',
    '#prefix' => '<div id="webfact-api-key">',
    '#suffix' => '</div>',
    '#disabled' => TRUE,
  );

  $form['generate_api_key'] = array(
    '#type' => 'button',
    '#value' => 'Generate API key',
    '#ajax' => array(
      'callback' => 'ajax_webfactapi_generate_api_key_callback',
      'wrapper' => 'webfact-api-key',
      'method' => 'replace',
      'progress' => array(
        'type' => 'throbber',
      ),
    ),
  );

  $form['public_key'] = array(
    '#type' => 'textarea',
    '#title' => 'Public key',
    '#prefix' => '<div id="webfact-public-key">',
    '#suffix' => '</div>',
    '#description' => t('Copy that key into to the website which will call this API.'),
    '#disabled' => TRUE,
    '#rows' => 9,
  );
  $form['generate_key_pair'] = array(
    '#type' => 'button',
    '#value' => 'Generate key pair',
    '#ajax' => array(
      'callback' => 'ajax_webfactapi_generate_key_pair_callback',
      'wrapper' => 'webfact-public-key',
      'method' => 'replace',
      'progress' => array(
        'type' => 'throbber',
      ),
    ),
  );

  $private_key = webfactapi_get_private_key();
  if ($private_key) {
    $public_key = webfactapi_get_public_key($private_key);
    if ($public_key) {
      $form['public_key']['#value'] = $public_key;
    }
  }

  return $form;
}


function ajax_webfactapi_generate_api_key_callback($form, &$form_state) {
  $key = hash('sha256', substr(md5(microtime()), rand(0, 26), 5));
  $encrypted_key = webfactapi_api_key_encrypt($key);
  variable_set('webfact_api_key', $encrypted_key);

  $form['api_key']['#value'] = $key;
  $form['api_key']['#description'] = t('Copy that API key into Nova Hub. It will disappear if you reload the page.');

  return $form['api_key'];
}


function ajax_webfactapi_generate_key_pair_callback($form, &$form_state) {
  $form['public_key']['#value'] = webfactapi_generate_encryption_key_pair();

  return $form['public_key'];
}


/**
 * Encrypts a Webfact API key.
 */
function webfactapi_api_key_encrypt($key) {
  return hash('sha256', $key . drupal_get_hash_salt());
}


function webfactapi_get_api_key() {
  return variable_get('webfact_api_key', webfactapi_api_key_encrypt(''));
}

function webfactapi_generate_encryption_key_pair() {
  $private_key = openssl_pkey_new(array(
    'private_key_bits' => 1024,      // Size of Key.
    'private_key_type' => OPENSSL_KEYTYPE_RSA,
  ));

  $private_key_string = '';
  openssl_pkey_export($private_key, $private_key_string);

  variable_set('webfactapi_private_key', $private_key_string);

  $public_key = webfactapi_get_public_key($private_key);

  // Free the private Key.
  openssl_free_key($private_key);

  return $public_key;
}


function webfactapi_get_public_key($private_key) {
  $key = openssl_pkey_get_details($private_key);

  return $key['key'];
}


function webfactapi_get_private_key() {
  $key_string = variable_get('webfactapi_private_key', null);

  return openssl_pkey_get_private($key_string);
}


function webfactapi_decode_incoming_params(&$params) {
  $private_key = webfactapi_get_private_key();
  $decoded = urldecode($params['data']);

  $json_encoded_data = '';
  // Data is too big to use with this key size so it need to be splited and
  // encrypt piece by piece.
  $json_encoded_data = webfactapi_decrypt_pieces($decoded, $private_key);

  $data = json_decode($json_encoded_data, true);

  unset($data['token']);

  $params = $data;
}


function webfactapi_decrypt_pieces($source, $private_key) {

  $maxlength = 128;

  $output = '';

  while($source) {
    $input = substr($source, 0, $maxlength);
    $source = substr($source, $maxlength);
    openssl_private_decrypt($input, $out, $private_key);
    $output .= $out;
  }
  return $output;

}
