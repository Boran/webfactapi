<?php
/**
 * @file
 * Code for the Webfactory API feature.
 */

include_once 'webfactapi.features.inc';

/**
 * Implements hook_services_resources
 * @return array
 */
function webfactapi_services_resources() {
  $webfact_website_resource = array(
    'website' => array(
      'operations' => array(
        'retrieve' => array(
          'file' => array('type' => 'inc', 'module' => 'webfactapi', 'name' => 'resources/website_resource'),
          'callback' => '_webfact_api_website_retrieve',
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the website to get',
            ),
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'index' => array(
          'file' => array('type' => 'inc', 'module' => 'webfactapi', 'name' => 'resources/website_resource'),
          'callback' => '_webfact_api_website_retrieve_all',
          'args' => array(
            array(
              'name' => 'page',
              'type' => 'int',
              'description' => '',
              'source' => array(
                'param' => 'page',
              ),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'parameters',
              'type' => 'array',
              'description' => '',
              'source' => 'param',
              'optional' => TRUE,
              'default value' => array(),
            )
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'file' => array('type' => 'inc', 'module' => 'webfactapi', 'name' => 'resources/website_resource'),
          'callback' => '_webfact_api_website_update',
          'args' => array(
            array(
              'name' => 'website data',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The website data to update',
              'type' => 'array',
            ),
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
        ),
        'create' => array(
          'file' => array('type' => 'inc', 'module' => 'webfactapi', 'name' => 'resources/website_resource'),
          'callback' => '_webfact_api_website_create',
          'args' => array(
            array(
              'name' => 'website data',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The website data to create',
              'type' => 'array',
            ),
          ),
          'access callback' => '_webfact_api_website_resource_access',
          'access arguments' => array('create'),
          'access arguments append' => TRUE,
        ),
      ),
    ),

  );

  return $webfact_website_resource;
}

/** Access callback */
function _webfact_api_website_resource_access($op = 'view', $args = array()) {

  if ($op == 'create') {
    //check all required data is present
    $created_required_data = array('hostname', 'site_email', 'node_title');
    foreach ($created_required_data as $required_data) {
      if (!array_key_exists($required_data, $args[0]) || !$args[0][$required_data]) {
        return services_error(t($required_data . ' is required'), 406);
      }
    }
  }
  elseif ($op == 'update') {
    //check all required data is present
    $created_required_data = array('website_nid');
    foreach ($created_required_data as $required_data) {
      if (!array_key_exists($required_data, $args[0]) || !$args[0][$required_data]) {
        return services_error(t($required_data . ' is required'), 406);
      }
    }
  }
  return TRUE;
}

